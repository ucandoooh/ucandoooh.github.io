<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ucandoooh&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ce0288d4b8d0a24d02937079e25fa836</icon>
  <subtitle>IT Sharing</subtitle>
  <link href="https://ucandoooh.com.cn/atom.xml" rel="self"/>
  
  <link href="https://ucandoooh.com.cn/"/>
  <updated>2021-06-05T07:03:16.036Z</updated>
  <id>https://ucandoooh.com.cn/</id>
  
  <author>
    <name>Ucandoooh</name>
    <email>ucandoooh@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring测试-Junit4和Junit5资源引入方式</title>
    <link href="https://ucandoooh.com.cn/2021/05/31/spring-junit-diff/"/>
    <id>https://ucandoooh.com.cn/2021/05/31/spring-junit-diff/</id>
    <published>2021-05-31T14:57:11.000Z</published>
    <updated>2021-06-05T07:03:16.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>IDE - <a href="https://www.jetbrains.com/idea/">IDEA</a>（Community）</li><li>Framework - Spring Boot，Mybatis</li></ul><hr><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><blockquote><p>对于创建配置这块简略带过，主要阐述Junit4和Junit5的资源引入方式</p></blockquote><ol><li><a href="https://start.spring.io/">https://start.spring.io/</a>快速搭建引入Web和Mybatis依赖的Maven项目，导入IDEA，Ultimate版本自带构建Spring Boot。</li><li><a href="https://mvnrepository.com/">MVN仓库</a>查找依赖引入，引入Druid数据库连接池、MySql Connector、Junit</li><li>创建Entity实体类、Dao数据库存取对象以及Mapper，Mybatis配置、Spring配置</li><li>关键配置：spring-dao.xml中扫描Dao的配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.zxn.app.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>IDEA创建测试类的快捷键，<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd>，或者鼠标悬浮在类上<kbd>Alt</kbd>+<kbd>Enter</kbd>选择create test</p><p><img src="/2021/05/31/spring-junit-diff/create-new-test.jpg" alt="create-new-test"></p><p>选择Junit4/Junit5</p><p><img src="/2021/05/31/spring-junit-diff/create-test-ui.jpg" alt="create-test-ui"></p></li></ol><hr><h3 id="Junit4"><a href="#Junit4" class="headerlink" title="Junit4"></a>Junit4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>@RunWith加载SpringJUnit4ClassRunner测试驱动，用于跑Spring测试</li><li>@ContextConfiguration加载资源文件，源文件路径下的spring/spring-dao.xml，用于注入Dao</li><li>此处使用的断言是org.junit.Assert类的静态方法，判断是否成功加载spring-dao.xml，扫描注入了Dao，成功则Dao不为null</li><li>测试通过不抛异常，并有log打印出加载资源的过程</li></ol><hr><h3 id="Junit5"><a href="#Junit5" class="headerlink" title="Junit5"></a>Junit5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>@ExtendWith(SpringExtension.class)加载Spring测试框架</li><li>@ContextConfiguration加载资源文件，源文件路径下的spring/spring-dao.xml，用于注入Dao</li></ol><blockquote><p>以上两者可以用@SpringJUnitConfig代替，简洁明了</p></blockquote><ol start="3"><li>此处使用的断言是org.junit.jupiter.api.Assertions类的静态方法，判断是否成功加载spring-dao.xml，扫描注入了Dao，成功则Dao不为null</li><li>测试通过不抛异常，并有log打印出加载资源的过程</li></ol><h4 id="测试启动Web服务"><a href="#测试启动Web服务" class="headerlink" title="测试启动Web服务"></a>测试启动Web服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = AppApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用@SpringBootTest加载Web启动类AppApplication</li><li>webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT使用本地的一个随机端口启动服务</li><li>配合使用@ContextConfiguration加载资源或者在AppApplication中加上@ImportResource</li></ol><blockquote><p>注意切勿重复加载资源，不然会报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@ImportResource(&quot;classpath:spring/spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(AppApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p><img src="/2021/05/31/spring-junit-diff/project-structure.jpg" alt="project-structure"></p><p>因为项目是分模块管理，如上图所示。</p><p>Dao放在persistent模块，Web启动类AppApplication放在web模块</p><p>当在persistent模块测试启动AppApplication，@ImportResource(“classpath:spring/spring-dao.xml”)加载的是persistent模块classpath下的spring/spring-dao.xml。</p><p>而当单独在web模块启动AppApplication来启动web会提示</p><p><strong>class path resource [spring/spring-dao.xml] cannot be opened because it does not exist</strong></p><p>改成@ImportResource(“classpath*:spring/spring-dao.xml”)就可以了</p><p>原因：</p><blockquote><ol><li><p>加载的资源，不在当前ClassLoader的路径里，那么用classpath:前缀是找不到的，这种情况下就需要使用classpath*:前缀</p></li><li><p>classpath:与classpath*:的区别在于，前者只会从第一个classpath中加载，而 后者会从所有的classpath中加载</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE - &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IDEA&lt;/a&gt;（Communi</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ucandoooh.com.cn/tags/Java/"/>
    
    <category term="Spring" scheme="https://ucandoooh.com.cn/tags/Spring/"/>
    
  </entry>
  
</feed>
