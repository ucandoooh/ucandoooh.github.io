<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ucandoooh&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ce0288d4b8d0a24d02937079e25fa836</icon>
  <subtitle>IT Sharing</subtitle>
  <link href="https://ucandoooh.com.cn/atom.xml" rel="self"/>
  
  <link href="https://ucandoooh.com.cn/"/>
  <updated>2021-10-04T03:21:08.247Z</updated>
  <id>https://ucandoooh.com.cn/</id>
  
  <author>
    <name>Ucandoooh</name>
    <email>ucandoooh@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下性能监控与JVM排错</title>
    <link href="https://ucandoooh.com.cn/2021/10/04/optimization-troubleshooting-JVM-Linux/"/>
    <id>https://ucandoooh.com.cn/2021/10/04/optimization-troubleshooting-JVM-Linux/</id>
    <published>2021-10-04T02:30:20.000Z</published>
    <updated>2021-10-04T03:21:08.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux性能监控"><a href="#Linux性能监控" class="headerlink" title="Linux性能监控"></a>Linux性能监控</h2><blockquote><p>pidstat [ 选项 ] [ &lt;时间间隔&gt; ] [ &lt;次数&gt; ]<br>pidstat 主要用于监控全部或指定进程占用系统资源的情况</p></blockquote><ol><li><p>全局（CPU、内存、磁盘）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top / uptime</span><br></pre></td></tr></table></figure></li><li><p>CPU</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmstat -n 2 3   （延迟2秒共采样3次)</span><br><span class="line">mpstat -P ALL 2</span><br><span class="line">pidstat -u 1 -p xxxx</span><br></pre></td></tr></table></figure></li><li><p>内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free -m </span><br><span class="line">pidstat -r 采样间隔秒数 -p xxxx</span><br></pre></td></tr></table></figure></li><li><p>磁盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure></li><li><p>磁盘IO</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iostat -xdk 2 3</span><br><span class="line">pidstat -d -p xxxx</span><br></pre></td></tr></table></figure></li><li><p>网络IO</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifstat</span><br></pre></td></tr></table></figure></li></ol><h2 id="JVM排错"><a href="#JVM排错" class="headerlink" title="JVM排错"></a>JVM排错</h2><blockquote><p>ps 命令用于监测进程的工作情况</p></blockquote><ol><li><p>top命令找cpu占比最高的（java）</p></li><li><p>ps -ef  / jps -l  进一步定位</p></li><li><p>定位到具体线程或者代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -mp 进程 -o THREAD,tid,time</span><br><span class="line">    </span><br><span class="line">-m : 显示所有线程</span><br><span class="line">-p : pid 进程使用cpu的时间</span><br><span class="line">-o : 自定义格式</span><br></pre></td></tr></table></figure></li><li><p>线程ID转16进制（英文小写）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; xxxxxx</span><br></pre></td></tr></table></figure></li><li><p>查看错误具体位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jstack 进程ID | grep tid -A 60</span><br><span class="line">tid 为第4步骤转换的16进制 线程号</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux性能监控&quot;&gt;&lt;a href=&quot;#Linux性能监控&quot; class=&quot;headerlink&quot; title=&quot;Linux性能监控&quot;&gt;&lt;/a&gt;Linux性能监控&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;pidstat [ 选项 ] [ &amp;lt;时间间隔&amp;gt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://ucandoooh.com.cn/tags/Linux/"/>
    
    <category term="JVM" scheme="https://ucandoooh.com.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Idea常用快捷键</title>
    <link href="https://ucandoooh.com.cn/2021/10/04/idea-shortcut-key/"/>
    <id>https://ucandoooh.com.cn/2021/10/04/idea-shortcut-key/</id>
    <published>2021-10-04T02:25:11.000Z</published>
    <updated>2021-10-04T03:19:05.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找类、文件、方法、变量"><a href="#查找类、文件、方法、变量" class="headerlink" title="查找类、文件、方法、变量"></a>查找类、文件、方法、变量</h2><p><kbd>ctrl</kbd>+<kbd>N</kbd>：查类；</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>N</kbd>：查文件；</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>alt</kbd>+<kbd>N</kbd>：查项目中的方法/变量；</p><p><kbd>alt</kbd>+<kbd>F7</kbd>：查类、方法、变量引用的地方</p><p><kbd>ctrl</kbd>+<kbd>O</kbd>：查所有可重写的方法</p><p><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>H</kbd>：方法的调用关系</p><hr><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><kbd>ctrl</kbd>+<kbd>E</kbd>：最近打开文件列表，按两次只展示修改过的；</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>E</kbd>：定位最近打开文件列表，按两次只展示修改过的；</p><p><kbd>ctrl</kbd>+<kbd>F12</kbd>：类中快速定位某方法/属性</p><p><kbd>ctrl</kbd>+<kbd>G</kbd>：定位行</p><hr><h2 id="查找-替换文本"><a href="#查找-替换文本" class="headerlink" title="查找/替换文本"></a>查找/替换文本</h2><p><kbd>ctrl</kbd>+<kbd>F</kbd>：查找；</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>F</kbd>：工程内查文本；</p><p><kbd>F3</kbd>：向下查；<kbd>shift</kbd>+<kbd>F3</kbd>：向上查</p><p><kbd>ctrl</kbd>+<kbd>R</kbd>：替换</p><hr><h2 id="代码生成-封装"><a href="#代码生成-封装" class="headerlink" title="代码生成/封装"></a>代码生成/封装</h2><p><kbd>ctrl</kbd>+<kbd>J</kbd>：常用的封装代码</p><p><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>T</kbd>：选中代码包裹</p><p><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>V</kbd>：快速声明变量</p><p><kbd>alt</kbd>+<kbd>insert</kbd>：快速方法生成（getter/setter）</p><hr><h2 id="提升代码可读性、代码质量、编码速度"><a href="#提升代码可读性、代码质量、编码速度" class="headerlink" title="提升代码可读性、代码质量、编码速度"></a>提升代码可读性、代码质量、编码速度</h2><p><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>L</kbd>：格式化</p><p><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>O</kbd>：自动导包/删除无用包</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>/</kbd>：代码块注释</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>+</kbd>/<kbd>-</kbd>：方法展开/收起</p><p><kbd>alt</kbd>+<kbd>鼠标左键</kbd>：多行编辑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查找类、文件、方法、变量&quot;&gt;&lt;a href=&quot;#查找类、文件、方法、变量&quot; class=&quot;headerlink&quot; title=&quot;查找类、文件、方法、变量&quot;&gt;&lt;/a&gt;查找类、文件、方法、变量&lt;/h2&gt;&lt;p&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;N&lt;/kbd&gt;：查</summary>
      
    
    
    
    
    <category term="Idea" scheme="https://ucandoooh.com.cn/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>简单访问量统计(Spring Boot+Redis+Echarts)</title>
    <link href="https://ucandoooh.com.cn/2021/06/13/spring-redis-traffic-stat/"/>
    <id>https://ucandoooh.com.cn/2021/06/13/spring-redis-traffic-stat/</id>
    <published>2021-06-13T08:57:16.000Z</published>
    <updated>2021-06-13T16:03:09.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>IDE - IDEA</li><li>Spring Boot + Redis - 快速构建部署简单的Web服务</li><li>Thymeleaf - 模板引擎</li><li>VMware Workstation（Red Hat + Redis） - 部署Redis服务</li><li>ECharts - 前端使用柱状图展示访问量</li></ul><hr><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="1-虚拟机-Red-Hat-Redis服务"><a href="#1-虚拟机-Red-Hat-Redis服务" class="headerlink" title="1. 虚拟机 - Red Hat - Redis服务"></a>1. 虚拟机 - Red Hat - Redis服务</h4><p><a href="https://redis.io/download">Redis官网</a> 最新的安装信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.redis.io/releases/redis-6.2.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-6.2.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-6.2.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><p>下载、解压、编译完成后便可启动Redis服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> src/redis-server</span></span><br></pre></td></tr></table></figure><p>Redis服务启动完毕，此时的服务是前端服务，该Terminal挂着（<kbd>ctrl</kbd>+<kbd>c</kbd>可shutdown服务）。</p><p>另外打开新的Terminal启动Redis客户端进行操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> src/redis-cli</span></span><br></pre></td></tr></table></figure><p>另外把<code>protected-mode</code>设为no，方便本机（非虚拟机本身）的客户端连接该Redis服务</p><p>此处在<code>redis-cli</code>客户端命令行进行临时配置（关掉服务就失效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set protected-mode no</span><br><span class="line">127.0.0.1:6379&gt; config get protected-mode</span><br><span class="line">1) &quot;protected-mode&quot;</span><br><span class="line">2) &quot;no&quot;</span><br></pre></td></tr></table></figure><p>也可以对配置文件<code>redis-6.2.4/redis.config</code>进行配置，eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 绑定环回接口地址，只允许本机客户端连接，注释掉则放开允许所有网络接口进行连接</span></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> yes-后台守护进程运行，no-前台运行</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta">#</span><span class="bash"> yes-如果没有对Redis设置密码或者尝试连接Redis的主机ip没有被<span class="built_in">bind</span>，会被拒绝连接</span></span><br><span class="line">protected-mode yes</span><br></pre></td></tr></table></figure><h4 id="2-Spring-Boot项目配置"><a href="#2-Spring-Boot项目配置" class="headerlink" title="2. Spring Boot项目配置"></a>2. Spring Boot项目配置</h4><ol><li>web、redis、thymeleaf的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>application.yml</code>配置，这里只配置了虚拟机的ip，如果redis配置了账号密码等可以参照<code>RedisProperties.java</code>里头的配置选项</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.30</span><span class="number">.128</span></span><br></pre></td></tr></table></figure><ol start="3"><li>项目结构</li></ol><p><img src="/2021/06/13/spring-redis-traffic-stat/project-struture.png" alt="project-struture"></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><ol><li>创建拦截器对uri进行拦截，使用Redis进行统计，并放行</li><li>获取Redis统计的数据传到前端，使用ECharts柱状图显示统计数据</li></ol></blockquote><h4 id="TrafficIntercepter-java"><a href="#TrafficIntercepter-java" class="headerlink" title="TrafficIntercepter.java"></a>TrafficIntercepter.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficIntercepter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_URI = <span class="string">&quot;uri&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; operations = redisTemplate.opsForHash();</span><br><span class="line">        operations.increment(KEY_URI, uri, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>TrafficIntercepter</code>实现<code>HandlerInterceptor</code>接口</li><li>重写<code>preHandle</code>方法，注入Redis模板<code>StringRedisTemplate</code>，获取Hash操作实例</li><li><code>operations.increment(KEY_URI, uri, 1)</code>为Hash表 key(KEY_URI=”uri”) 中的指定field(请求的uri)的整数值加上1</li><li>将拦截的所有请求放行</li></ol><h4 id="TrafficConfiguration-java"><a href="#TrafficConfiguration-java" class="headerlink" title="TrafficConfiguration.java"></a>TrafficConfiguration.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TrafficIntercepter trafficIntercepter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(trafficIntercepter)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/stat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>TrafficConfiguration</code>实现<code>WebMvcConfigurer</code>接口</li><li>重写<code>addInterceptors</code>方法，添加拦截器（注入的<code>trafficIntercepter</code>实例）</li><li>路径匹配/**，排除统计页面请求路径/stat</li></ol><h4 id="TrafficController-java"><a href="#TrafficController-java" class="headerlink" title="TrafficController.java"></a>TrafficController.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_URI = <span class="string">&quot;uri&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stat&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">trafficStat</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; operations = redisTemplate.opsForHash();</span><br><span class="line">        Map&lt;Object, Object&gt; entries = operations.entries(KEY_URI);</span><br><span class="line">        List&lt;String&gt; uris = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; counts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!entries.isEmpty()) &#123;</span><br><span class="line">            entries.forEach((k, v) -&gt; &#123;</span><br><span class="line">                uris.add((String) k);</span><br><span class="line">                counts.add((String) v);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;uris&quot;</span>, uris);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;counts&quot;</span>, counts);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;traffic-stat&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">path1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;path1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">path2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;path2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">path3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;path3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>trafficStat(Model model)</code>获取Redis中存储的Hash表中key为”uri“的各个请求访问路径以及其访问量，分别保存到<code>List</code>中，并通过model将数据传到前端页面<code>traffic-stat.html</code></li><li><code>path1()</code>/<code>path2()</code>/<code>path3()</code>用于访问统计</li></ol><h4 id="traffic-stat-html"><a href="#traffic-stat-html" class="headerlink" title="traffic-stat.html"></a>traffic-stat.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>访问量统计<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.2.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uris = [[$&#123;uris&#125;]];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> counts = [[$&#123;counts&#125;]];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">text</span>: <span class="string">&#x27;访问量统计&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:[<span class="string">&#x27;访问量&#x27;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: uris</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">series</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;访问量&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: counts</span></span><br><span class="line"><span class="javascript">            &#125;]</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        myChart.setOption(option);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>声明使用Thymeleaf标签</li><li><code>&lt;head&gt;</code>分别引入jquery和ECharts的js资源</li><li><code>&lt;body&gt;</code>放置一个存放ECharts图表的Dom容器<code>&lt;div&gt;</code></li><li><code>&lt;script th:inline=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</code>，Thymeleaf内联声明<code>th:inline=&quot;javascript&quot;</code>允许JavaScript代码块里访问model中的数据，更好地集成 JavaScript</li><li><code>[[$&#123;uris&#125;]]</code>、<code>[[$&#123;counts&#125;]]</code>分别获取后台传来的uri、counts数组</li><li><code>var myChart = echarts.init(document.getElementById(&#39;data&#39;))</code>初始echarts实例，放如准备好的Dom容器中</li><li><code>option</code>指定图表的配置项和数据:<ul><li>title：配置图表标题</li><li>tooltip：配置提示信息</li><li>legend：配置图例，可以通过点击图例控制图例类型显示与否</li><li>xAxis：配置X轴坐标，将访问路径uris设入X轴data</li><li>yAxis：配置Y轴坐标</li><li>series：配置列表内容，将访问量counts设入data</li></ul></li><li><code>myChart.setOption(option)</code>指定的配置项和数据显示图表</li></ol><hr><h3 id="Apache-Bench压测"><a href="#Apache-Bench压测" class="headerlink" title="Apache Bench压测"></a>Apache Bench压测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ucandoooh&gt;ab -n 10000 -c 10 localhost:8080/path1</span><br><span class="line">C:\Users\ucandoooh&gt;ab -n 8000 -c 10 localhost:8080/path2</span><br><span class="line">C:\Users\ucandoooh&gt;ab -n 3000 -c 10 localhost:8080/path3</span><br></pre></td></tr></table></figure><ol><li>对<code>/path1</code>路径进行并发数为10的10000次请求访问</li><li>对<code>/path2</code>路径进行并发数为10的8000次请求访问</li><li>对<code>/path3</code>路径进行并发数为10的3000次请求访问</li></ol><hr><h3 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h3><p><img src="/2021/06/13/spring-redis-traffic-stat/traffic-stat.png" alt="traffic-stat"></p><p>访问<code>/stat</code>查看访问量统计柱状图</p><p>访问量对应Apache Bench压测请求数</p><p>由此可以看出Redis是高并发的</p><blockquote><ol><li>Redis是单线程程序，保证单个操作的原子性，是线程安全的</li><li>Redis是基于内存的，内存的读写速度非常快，并且能将内存中的数据持久化到磁盘</li><li>Redis支持master-slave主从数据备份……</li></ol></blockquote><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>Thymeleaf内联 - JavaScript代码块里访问model中的数据 - escaped和unescaped方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// escaped方式</span></span><br><span class="line"><span class="keyword">var</span> uris = [[$&#123;uris&#125;]];</span><br><span class="line"><span class="comment">// 页面显示结果如下，内容会用引号括起，并且经过转义</span></span><br><span class="line"><span class="comment">// 数据正确，柱状图正常显示</span></span><br><span class="line"><span class="keyword">var</span> uris = [<span class="string">&quot;\/path1&quot;</span>,<span class="string">&quot;\/path2&quot;</span>,<span class="string">&quot;\/path3&quot;</span>];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unescaped方式</span></span><br><span class="line"><span class="keyword">var</span> uris = [($&#123;uris&#125;)];</span><br><span class="line"><span class="comment">// 页面显示结果如下，内容未用引号括起，并未经过转义</span></span><br><span class="line"><span class="comment">// 页面会渲染失败，Console控制台报错</span></span><br><span class="line"><span class="keyword">var</span> uris = [<span class="regexp">/path1, /</span>path2, /path3];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 但如果unescaped方式处理的是list的json字符串</span></span><br><span class="line"><span class="keyword">var</span> urisjson = [($&#123;urisjson&#125;)];</span><br><span class="line"><span class="comment">// 页面显示结果如下，json字符串最外层引号被去掉，字符串里面特殊符号未转义</span></span><br><span class="line"><span class="comment">// 数据正确，柱状图正常显示</span></span><br><span class="line"><span class="keyword">var</span> urisjson = [<span class="string">&quot;/path1&quot;</span>,<span class="string">&quot;/path2&quot;</span>,<span class="string">&quot;/path3&quot;</span>];</span><br></pre></td></tr></table></figure><p>这两种方式大家斟酌使用，不同场景不同使用方式，甚是有趣</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE - IDEA&lt;/li&gt;
&lt;li&gt;Spring Boot + Redis - 快速构建部署简单的Web服务&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ucandoooh.com.cn/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://ucandoooh.com.cn/tags/Spring-Boot/"/>
    
    <category term="Redis" scheme="https://ucandoooh.com.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring测试-Junit4和Junit5资源引入方式</title>
    <link href="https://ucandoooh.com.cn/2021/05/31/spring-junit-diff/"/>
    <id>https://ucandoooh.com.cn/2021/05/31/spring-junit-diff/</id>
    <published>2021-05-31T14:57:11.000Z</published>
    <updated>2021-06-15T16:40:01.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>IDE - <a href="https://www.jetbrains.com/idea/">IDEA</a>（Community）</li><li>Framework - Spring Boot，Mybatis</li></ul><hr><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote><p>对于创建配置这块简略带过，主要阐述Junit4和Junit5的资源引入方式</p></blockquote><ol><li><a href="https://start.spring.io/">https://start.spring.io/</a>快速搭建引入Web和Mybatis依赖的Maven项目，导入IDEA，Ultimate版本自带构建Spring Boot。</li><li><a href="https://mvnrepository.com/">MVN仓库</a>查找依赖引入，引入Druid数据库连接池、MySql Connector、Junit</li><li>创建Entity实体类、Dao数据库存取对象以及Mapper，Mybatis配置、Spring配置</li><li>关键配置：<code>spring-dao.xml</code>中扫描Dao的配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.zxn.app.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>IDEA创建测试类的快捷键，<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd>，或者鼠标悬浮在类上<kbd>Alt</kbd>+<kbd>Enter</kbd>选择create test</p><p><img src="/2021/05/31/spring-junit-diff/create-new-test.jpg" alt="create-new-test"></p><p>选择Junit4/Junit5</p><p><img src="/2021/05/31/spring-junit-diff/create-test-ui.jpg" alt="create-test-ui"></p></li></ol><hr><h3 id="Junit4"><a href="#Junit4" class="headerlink" title="Junit4"></a>Junit4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@RunWith</code>加载<code>SpringJUnit4ClassRunner</code>测试驱动，用于跑Spring测试</li><li><code>@ContextConfiguration</code>加载资源文件，源文件路径下的<code>spring/spring-dao.xml</code>，用于注入Dao</li><li>此处使用的断言是<code>org.junit.Assert</code>类的静态方法，判断是否成功加载<code>spring-dao.xml</code>，扫描注入了Dao，成功则Dao不为null</li><li>测试通过不抛异常，并有log打印出加载资源的过程</li></ol><hr><h3 id="Junit5"><a href="#Junit5" class="headerlink" title="Junit5"></a>Junit5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@ExtendWith(SpringExtension.class)</code>加载Spring测试框架</li><li><code>@ContextConfiguration</code>加载资源文件，源文件路径下的<code>spring/spring-dao.xml</code>，用于注入Dao</li></ol><blockquote><p>以上两者可以用<code>@SpringJUnitConfig</code>代替，简洁明了</p></blockquote><ol start="3"><li>此处使用的断言是<code>org.junit.jupiter.api.Assertions</code>类的静态方法，判断是否成功加载<code>spring-dao.xml</code>，扫描注入了Dao，成功则Dao不为null</li><li>测试通过不抛异常，并有log打印出加载资源的过程</li></ol><h4 id="测试启动Web服务"><a href="#测试启动Web服务" class="headerlink" title="测试启动Web服务"></a>测试启动Web服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = AppApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeckillDaoTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillDao seckillDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(seckillDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>@SpringBootTest</code>加载Web启动类<code>AppApplication</code></li><li><code>webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT</code>使用本地的一个随机端口启动服务</li><li>配合使用<code>@ContextConfiguration</code>加载资源或者在<code>AppApplication</code>中加上<code>@ImportResource</code></li></ol><blockquote><p>注意切勿重复加载资源，不然会报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@ImportResource(&quot;classpath:spring/spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(AppApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="/2021/05/31/spring-junit-diff/project-structure.jpg" alt="project-structure"></p><p>因为项目是分模块管理，如上图所示。</p><p>Dao放在<code>persistent</code>模块，Web启动类<code>AppApplication</code>放在web模块</p><p>当在<code>persistent</code>模块测试启动<code>AppApplication</code>，<code>@ImportResource(&quot;classpath:spring/spring-dao.xml&quot;)</code>加载的是<code>persistent</code>模块classpath下的<code>spring/spring-dao.xml</code>。</p><p>而当单独在<code>web</code>模块启动<code>AppApplication</code>来启动web会提示</p><p><strong>class path resource [spring/spring-dao.xml] cannot be opened because it does not exist</strong></p><p>改成<code>@ImportResource(&quot;classpath*:spring/spring-dao.xml&quot;)</code>就可以了</p><p>原因：</p><blockquote><ol><li><p>加载的资源，不在当前ClassLoader的路径里，那么用classpath:前缀是找不到的，这种情况下就需要使用classpath*:前缀</p></li><li><p>classpath:与classpath*:的区别在于，前者只会从第一个classpath中加载，而 后者会从所有的classpath中加载</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE - &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IDEA&lt;/a&gt;（Communi</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ucandoooh.com.cn/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://ucandoooh.com.cn/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
